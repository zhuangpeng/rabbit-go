// Code generated by goctl. DO NOT EDIT!
// Source: usercenter.proto

package client

import (
	"context"

	"backend/rabbit-go/usercenter/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApiInfo                    = pb.ApiInfo
	ApiListResp                = pb.ApiListResp
	ApiPageReq                 = pb.ApiPageReq
	BaseResp                   = pb.BaseResp
	CallbackReq                = pb.CallbackReq
	ChangePasswordReq          = pb.ChangePasswordReq
	CreateOrUpdateMenuParamReq = pb.CreateOrUpdateMenuParamReq
	CreateOrUpdateMenuReq      = pb.CreateOrUpdateMenuReq
	CreateOrUpdateTenantReq    = pb.CreateOrUpdateTenantReq
	CreateOrUpdateUserReq      = pb.CreateOrUpdateUserReq
	CreatePolicyReq            = pb.CreatePolicyReq
	DictionaryDetail           = pb.DictionaryDetail
	DictionaryDetailList       = pb.DictionaryDetailList
	DictionaryDetailReq        = pb.DictionaryDetailReq
	DictionaryInfo             = pb.DictionaryInfo
	DictionaryList             = pb.DictionaryList
	DictionaryPageReq          = pb.DictionaryPageReq
	Empty                      = pb.Empty
	GetUserListReq             = pb.GetUserListReq
	IDReq                      = pb.IDReq
	IDResp                     = pb.IDResp
	IDsReq                     = pb.IDsReq
	LoginReq                   = pb.LoginReq
	LoginResp                  = pb.LoginResp
	MenuInfo                   = pb.MenuInfo
	MenuInfoList               = pb.MenuInfoList
	MenuParamListResp          = pb.MenuParamListResp
	MenuParamResp              = pb.MenuParamResp
	MenuRoleInfo               = pb.MenuRoleInfo
	MenuRoleListResp           = pb.MenuRoleListResp
	Meta                       = pb.Meta
	OauthLoginReq              = pb.OauthLoginReq
	OauthRedirectResp          = pb.OauthRedirectResp
	PageInfoReq                = pb.PageInfoReq
	PolicyPartInfo             = pb.PolicyPartInfo
	ProviderInfo               = pb.ProviderInfo
	ProviderListResp           = pb.ProviderListResp
	RoleInfo                   = pb.RoleInfo
	RoleListResp               = pb.RoleListResp
	RoleMenuAuthorityReq       = pb.RoleMenuAuthorityReq
	RoleMenuAuthorityResp      = pb.RoleMenuAuthorityResp
	StatusCodeReq              = pb.StatusCodeReq
	StatusCodeUUIDReq          = pb.StatusCodeUUIDReq
	TenantInfo                 = pb.TenantInfo
	TenantListReq              = pb.TenantListReq
	TenantListResp             = pb.TenantListResp
	TenantTreeInfo             = pb.TenantTreeInfo
	TenantTreeListResp         = pb.TenantTreeListResp
	TokenInfo                  = pb.TokenInfo
	TokenListReq               = pb.TokenListReq
	TokenListResp              = pb.TokenListResp
	UUIDReq                    = pb.UUIDReq
	UUIDsReq                   = pb.UUIDsReq
	UpdatePolicyReq            = pb.UpdatePolicyReq
	UpdateProfileReq           = pb.UpdateProfileReq
	UserInfoResp               = pb.UserInfoResp
	UserListResp               = pb.UserListResp

	Menu interface {
		CreateOrUpdateMenu(ctx context.Context, in *CreateOrUpdateMenuReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenuListByRole(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfoList, error)
		GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error)
		CreateOrUpdateMenuParam(ctx context.Context, in *CreateOrUpdateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error)
		DeleteMenuParam(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetMenuParamListByMenuId(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamListResp, error)
	}

	defaultMenu struct {
		cli zrpc.Client
	}
)

func NewMenu(cli zrpc.Client) Menu {
	return &defaultMenu{
		cli: cli,
	}
}

func (m *defaultMenu) CreateOrUpdateMenu(ctx context.Context, in *CreateOrUpdateMenuReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewMenuClient(m.cli.Conn())
	return client.CreateOrUpdateMenu(ctx, in, opts...)
}

func (m *defaultMenu) DeleteMenu(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewMenuClient(m.cli.Conn())
	return client.DeleteMenu(ctx, in, opts...)
}

func (m *defaultMenu) GetMenuListByRole(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuInfoList, error) {
	client := pb.NewMenuClient(m.cli.Conn())
	return client.GetMenuListByRole(ctx, in, opts...)
}

func (m *defaultMenu) GetMenuList(ctx context.Context, in *PageInfoReq, opts ...grpc.CallOption) (*MenuInfoList, error) {
	client := pb.NewMenuClient(m.cli.Conn())
	return client.GetMenuList(ctx, in, opts...)
}

func (m *defaultMenu) CreateOrUpdateMenuParam(ctx context.Context, in *CreateOrUpdateMenuParamReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewMenuClient(m.cli.Conn())
	return client.CreateOrUpdateMenuParam(ctx, in, opts...)
}

func (m *defaultMenu) DeleteMenuParam(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewMenuClient(m.cli.Conn())
	return client.DeleteMenuParam(ctx, in, opts...)
}

func (m *defaultMenu) GetMenuParamListByMenuId(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*MenuParamListResp, error) {
	client := pb.NewMenuClient(m.cli.Conn())
	return client.GetMenuParamListByMenuId(ctx, in, opts...)
}

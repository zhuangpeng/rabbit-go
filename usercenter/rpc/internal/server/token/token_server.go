// Code generated by goctl. DO NOT EDIT!
// Source: usercenter.proto

package server

import (
	"context"

	"github.com/zhuangpeng/rabbit-go/usercenter/rpc/internal/logic/token"
	"github.com/zhuangpeng/rabbit-go/usercenter/rpc/internal/svc"
	"github.com/zhuangpeng/rabbit-go/usercenter/rpc/pb"
)

type TokenServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedTokenServer
}

func NewTokenServer(svcCtx *svc.ServiceContext) *TokenServer {
	return &TokenServer{
		svcCtx: svcCtx,
	}
}

func (s *TokenServer) CreateToken(ctx context.Context, in *pb.CreateTokenReq) (*pb.BaseResp, error) {
	l := tokenlogic.NewCreateTokenLogic(ctx, s.svcCtx)
	return l.CreateToken(in)
}

func (s *TokenServer) DeleteToken(ctx context.Context, in *pb.IDReq) (*pb.BaseResp, error) {
	l := tokenlogic.NewDeleteTokenLogic(ctx, s.svcCtx)
	return l.DeleteToken(in)
}

func (s *TokenServer) GetToken(ctx context.Context, in *pb.IDReq) (*pb.GetTokenResp, error) {
	l := tokenlogic.NewGetTokenLogic(ctx, s.svcCtx)
	return l.GetToken(in)
}

func (s *TokenServer) GetTokenList(ctx context.Context, in *pb.GetTokenListReq) (*pb.GetTokenListResp, error) {
	l := tokenlogic.NewGetTokenListLogic(ctx, s.svcCtx)
	return l.GetTokenList(in)
}

func (s *TokenServer) BlockAllTokenByUser(ctx context.Context, in *pb.IDReq) (*pb.BaseResp, error) {
	l := tokenlogic.NewBlockAllTokenByUserLogic(ctx, s.svcCtx)
	return l.BlockAllTokenByUser(in)
}

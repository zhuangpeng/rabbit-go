// Code generated by goctl. DO NOT EDIT!
// Source: usercenter.proto

package client

import (
	"context"

	"github.com/zhuangpeng/rabbit-go/usercenter/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApiInfo                    = pb.ApiInfo
	ApiListResp                = pb.ApiListResp
	ApiPageReq                 = pb.ApiPageReq
	BaseResp                   = pb.BaseResp
	ChangePasswordReq          = pb.ChangePasswordReq
	CreateOrUpdateMenuParamReq = pb.CreateOrUpdateMenuParamReq
	CreateOrUpdateMenuReq      = pb.CreateOrUpdateMenuReq
	CreateOrUpdateTenantReq    = pb.CreateOrUpdateTenantReq
	CreateOrUpdateUserReq      = pb.CreateOrUpdateUserReq
	CreatePolicyReq            = pb.CreatePolicyReq
	Empty                      = pb.Empty
	GetUserListReq             = pb.GetUserListReq
	IDReq                      = pb.IDReq
	IDResp                     = pb.IDResp
	IDsReq                     = pb.IDsReq
	LoginReq                   = pb.LoginReq
	LoginResp                  = pb.LoginResp
	MenuInfo                   = pb.MenuInfo
	MenuInfoList               = pb.MenuInfoList
	MenuParamListResp          = pb.MenuParamListResp
	MenuParamResp              = pb.MenuParamResp
	MenuRoleInfo               = pb.MenuRoleInfo
	MenuRoleListResp           = pb.MenuRoleListResp
	Meta                       = pb.Meta
	PageInfoReq                = pb.PageInfoReq
	PolicyPartInfo             = pb.PolicyPartInfo
	RoleInfo                   = pb.RoleInfo
	RoleListResp               = pb.RoleListResp
	RoleMenuAuthorityReq       = pb.RoleMenuAuthorityReq
	RoleMenuAuthorityResp      = pb.RoleMenuAuthorityResp
	StatusCodeReq              = pb.StatusCodeReq
	StatusCodeUUIDReq          = pb.StatusCodeUUIDReq
	TenantInfo                 = pb.TenantInfo
	TenantListReq              = pb.TenantListReq
	TenantListResp             = pb.TenantListResp
	TenantTreeInfo             = pb.TenantTreeInfo
	TenantTreeListResp         = pb.TenantTreeListResp
	UUIDReq                    = pb.UUIDReq
	UUIDsReq                   = pb.UUIDsReq
	UpdatePolicyReq            = pb.UpdatePolicyReq
	UpdateProfileReq           = pb.UpdateProfileReq
	UserInfoResp               = pb.UserInfoResp
	UserListResp               = pb.UserListResp

	User interface {
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*BaseResp, error)
		CreateOrUpdateUser(ctx context.Context, in *CreateOrUpdateUserReq, opts ...grpc.CallOption) (*BaseResp, error)
		GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfoResp, error)
		GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*UserListResp, error)
		DeleteUser(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
		BatchDeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*BaseResp, error)
		UpdateUserStatus(ctx context.Context, in *StatusCodeUUIDReq, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUser) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.ChangePassword(ctx, in, opts...)
}

func (m *defaultUser) CreateOrUpdateUser(ctx context.Context, in *CreateOrUpdateUserReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.CreateOrUpdateUser(ctx, in, opts...)
}

func (m *defaultUser) GetUserById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*UserInfoResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserById(ctx, in, opts...)
}

func (m *defaultUser) GetUserList(ctx context.Context, in *GetUserListReq, opts ...grpc.CallOption) (*UserListResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.GetUserList(ctx, in, opts...)
}

func (m *defaultUser) DeleteUser(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in, opts...)
}

func (m *defaultUser) BatchDeleteUser(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.BatchDeleteUser(ctx, in, opts...)
}

func (m *defaultUser) UpdateProfile(ctx context.Context, in *UpdateProfileReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateProfile(ctx, in, opts...)
}

func (m *defaultUser) UpdateUserStatus(ctx context.Context, in *StatusCodeUUIDReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := pb.NewUserClient(m.cli.Conn())
	return client.UpdateUserStatus(ctx, in, opts...)
}

// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"

	cacheUserCenterUserIdPrefix            = "cache:userCenter:user:id:"
	cacheUserCenterUserNicknamePrefix      = "cache:userCenter:user:nickname:"
	cacheUserCenterUserUsernameEmailPrefix = "cache:userCenter:user:username:email:"
	cacheUserCenterUserUsernamePrefix      = "cache:userCenter:user:username:"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*User, error)
		FindOneByNickname(ctx context.Context, nickname string) (*User, error)
		FindOneByUsernameEmail(ctx context.Context, username string, email sql.NullString) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id string) error
	}

	defaultUserModel struct {
		sqlc.CachedConn
		table string
	}

	User struct {
		Id          string         `db:"id"`           // 用户标识
		Username    string         `db:"username"`     // 用户名
		Password    string         `db:"password"`     // 密码
		Nickname    string         `db:"nickname"`     // 昵称
		SideMode    string         `db:"side_mode"`    // 布局方式
		BaseColor   string         `db:"base_color"`   // 后台页面色调
		ActiveColor string         `db:"active_color"` // 当前激活颜色设定
		RoleId      int64          `db:"role_id"`      // 角色标识
		Mobile      sql.NullString `db:"mobile"`       // 联系电话
		Email       sql.NullString `db:"email"`        // 邮箱
		Avatar      string         `db:"avatar"`       // 头像
		Status      int64          `db:"status"`       // 状态1--正常0--禁用
		CreateTime  time.Time      `db:"create_time"`  // 创建时间
		UpdateTime  time.Time      `db:"update_time"`  // 修改时间
	}
)

func newUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserModel {
	return &defaultUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userCenterUserIdKey := fmt.Sprintf("%s%v", cacheUserCenterUserIdPrefix, id)
	userCenterUserNicknameKey := fmt.Sprintf("%s%v", cacheUserCenterUserNicknamePrefix, data.Nickname)
	userCenterUserUsernameEmailKey := fmt.Sprintf("%s%v:%v", cacheUserCenterUserUsernameEmailPrefix, data.Username, data.Email)
	userCenterUserUsernameKey := fmt.Sprintf("%s%v", cacheUserCenterUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userCenterUserIdKey, userCenterUserNicknameKey, userCenterUserUsernameEmailKey, userCenterUserUsernameKey)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id string) (*User, error) {
	userCenterUserIdKey := fmt.Sprintf("%s%v", cacheUserCenterUserIdPrefix, id)
	var resp User
	err := m.QueryRowCtx(ctx, &resp, userCenterUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByNickname(ctx context.Context, nickname string) (*User, error) {
	userCenterUserNicknameKey := fmt.Sprintf("%s%v", cacheUserCenterUserNicknamePrefix, nickname)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userCenterUserNicknameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `nickname` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, nickname); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsernameEmail(ctx context.Context, username string, email sql.NullString) (*User, error) {
	userCenterUserUsernameEmailKey := fmt.Sprintf("%s%v:%v", cacheUserCenterUserUsernameEmailPrefix, username, email)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userCenterUserUsernameEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? and `email` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	userCenterUserUsernameKey := fmt.Sprintf("%s%v", cacheUserCenterUserUsernamePrefix, username)
	var resp User
	err := m.QueryRowIndexCtx(ctx, &resp, userCenterUserUsernameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, username); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	userCenterUserIdKey := fmt.Sprintf("%s%v", cacheUserCenterUserIdPrefix, data.Id)
	userCenterUserNicknameKey := fmt.Sprintf("%s%v", cacheUserCenterUserNicknamePrefix, data.Nickname)
	userCenterUserUsernameEmailKey := fmt.Sprintf("%s%v:%v", cacheUserCenterUserUsernameEmailPrefix, data.Username, data.Email)
	userCenterUserUsernameKey := fmt.Sprintf("%s%v", cacheUserCenterUserUsernamePrefix, data.Username)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Username, data.Password, data.Nickname, data.SideMode, data.BaseColor, data.ActiveColor, data.RoleId, data.Mobile, data.Email, data.Avatar, data.Status)
	}, userCenterUserIdKey, userCenterUserNicknameKey, userCenterUserUsernameEmailKey, userCenterUserUsernameKey)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userCenterUserIdKey := fmt.Sprintf("%s%v", cacheUserCenterUserIdPrefix, data.Id)
	userCenterUserNicknameKey := fmt.Sprintf("%s%v", cacheUserCenterUserNicknamePrefix, data.Nickname)
	userCenterUserUsernameEmailKey := fmt.Sprintf("%s%v:%v", cacheUserCenterUserUsernameEmailPrefix, data.Username, data.Email)
	userCenterUserUsernameKey := fmt.Sprintf("%s%v", cacheUserCenterUserUsernamePrefix, data.Username)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Username, newData.Password, newData.Nickname, newData.SideMode, newData.BaseColor, newData.ActiveColor, newData.RoleId, newData.Mobile, newData.Email, newData.Avatar, newData.Status, newData.Id)
	}, userCenterUserIdKey, userCenterUserNicknameKey, userCenterUserUsernameEmailKey, userCenterUserUsernameKey)
	return err
}

func (m *defaultUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserCenterUserIdPrefix, primary)
}

func (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserModel) tableName() string {
	return m.table
}

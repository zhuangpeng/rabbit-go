// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	globalkey "github.com/zhuangpeng/rabbit-go/pkg/globalKey"
	"github.com/zhuangpeng/rabbit-go/pkg/i18n"
	"github.com/zhuangpeng/rabbit-go/pkg/statuserr"
	"github.com/zhuangpeng/rabbit-go/pkg/utils/dbx"

	"github.com/zeromicro/go-zero/core/logx"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tenantFieldNames          = builder.RawFieldNames(&Tenant{})
	tenantRows                = strings.Join(tenantFieldNames, ",")
	tenantRowsExpectAutoSet   = strings.Join(stringx.Remove(tenantFieldNames, "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	tenantRowsWithPlaceHolder = strings.Join(stringx.Remove(tenantFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheUserCenterTenantIdPrefix   = "cache:userCenter:tenant:id:"
	cacheUserCenterTenantNamePrefix = "cache:userCenter:tenant:name:"
)

type (
	tenantModel interface {
		Insert(ctx context.Context, dropZeroValue bool, session sqlx.Session, data *Tenant) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Tenant, error)
		FindOneByName(ctx context.Context, name string) (*Tenant, error)
		Update(ctx context.Context, session sqlx.Session, data *Tenant) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Tenant) error
		Delete(ctx context.Context, id string) error
	}

	defaultTenantModel struct {
		sqlc.CachedConn
		table string
	}

	Tenant struct {
		Id        string       `db:"id"`        // 租户标识
		ParentId  string       `db:"parent_id"` // 父级标识
		Name      string       `db:"name"`      // 租户名称
		Contact   string       `db:"contact"`   // 联系人
		Mobile    string       `db:"mobile"`    // 联系电话
		Sort      int64        `db:"sort"`
		Status    int64        `db:"status"`     // 租户状态 1--启用 2--禁用
		StartTime time.Time    `db:"start_time"` // 租期开始时间
		EndTime   sql.NullTime `db:"end_time"`   // 租期结束时间
		CreatedAt time.Time    `db:"created_at"` // 创建时间
		UpdatedAt sql.NullTime `db:"updated_at"` // 更新时间
		DeletedAt sql.NullTime `db:"deleted_at"` // 删除时间
		Deleted   int64        `db:"deleted"`    // 是否删除 1-否 2-是
		Account   string       `db:"account"`    // 企业账号
		Revision  int64        `db:"revision"`   // 乐观锁版本
	}
)

func newTenantModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultTenantModel {
	return &defaultTenantModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`tenant`",
	}
}

func (m *defaultTenantModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userCenterTenantIdKey := fmt.Sprintf("%s%v", cacheUserCenterTenantIdPrefix, id)
	userCenterTenantNameKey := fmt.Sprintf("%s%v", cacheUserCenterTenantNamePrefix, data.Name)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userCenterTenantIdKey, userCenterTenantNameKey)
	return err
}

func (m *defaultTenantModel) FindOne(ctx context.Context, id string) (*Tenant, error) {
	userCenterTenantIdKey := fmt.Sprintf("%s%v", cacheUserCenterTenantIdPrefix, id)
	var resp Tenant
	err := m.QueryRowCtx(ctx, &resp, userCenterTenantIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and deleted = ? limit 1", tenantRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTenantModel) FindOneByName(ctx context.Context, name string) (*Tenant, error) {
	userCenterTenantNameKey := fmt.Sprintf("%s%v", cacheUserCenterTenantNamePrefix, name)
	var resp Tenant
	err := m.QueryRowIndexCtx(ctx, &resp, userCenterTenantNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `name` = ? and deleted = ? limit 1", tenantRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, name, globalkey.DelStateNo); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// Insert
// if dropZeroValue is true then filter the zero value with struct
// if session not nil, the execute statement with transactions
func (m *defaultTenantModel) Insert(ctx context.Context, dropZeroValue bool, session sqlx.Session, data *Tenant) (sql.Result, error) {
	userCenterTenantIdKey := fmt.Sprintf("%s%v", cacheUserCenterTenantIdPrefix, data.Id)
	userCenterTenantNameKey := fmt.Sprintf("%s%v", cacheUserCenterTenantNamePrefix, data.Name)
	if dropZeroValue {
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
			query, args, err := dbx.GenInsert(*data)
			logx.Infof("the args is: %s", args)
			if err != nil {
				return nil, err
			}
			if session != nil {
				return session.ExecCtx(ctx, query, args...)
			}
			return conn.ExecCtx(ctx, query, args...)
		}, userCenterTenantIdKey, userCenterTenantNameKey)
	} else {
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
			query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tenantRowsExpectAutoSet)
			if session != nil {
				return session.ExecCtx(ctx, query, data.Id, data.ParentId, data.Name, data.Contact, data.Mobile, data.Sort, data.Status, data.StartTime, data.EndTime, data.DeletedAt, data.Deleted, data.Account, data.Revision)
			}
			return conn.ExecCtx(ctx, query, data.Id, data.ParentId, data.Name, data.Contact, data.Mobile, data.Sort, data.Status, data.StartTime, data.EndTime, data.DeletedAt, data.Deleted, data.Account, data.Revision)
		}, userCenterTenantIdKey, userCenterTenantNameKey)
	}
}

// Update when session not nil update with transactions
func (m *defaultTenantModel) Update(ctx context.Context, session sqlx.Session, newData *Tenant) (sql.Result, error) {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return nil, err
	}
	userCenterTenantIdKey := fmt.Sprintf("%s%v", cacheUserCenterTenantIdPrefix, data.Id)
	userCenterTenantNameKey := fmt.Sprintf("%s%v", cacheUserCenterTenantNamePrefix, data.Name)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tenantRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.ParentId, newData.Name, newData.Contact, newData.Mobile, newData.Sort, newData.Status, newData.StartTime, newData.EndTime, newData.DeletedAt, newData.Deleted, newData.Account, newData.Revision, newData.Id)
		}
		return conn.ExecCtx(ctx, query, newData.ParentId, newData.Name, newData.Contact, newData.Mobile, newData.Sort, newData.Status, newData.StartTime, newData.EndTime, newData.DeletedAt, newData.Deleted, newData.Account, newData.Revision, newData.Id)
	}, userCenterTenantIdKey, userCenterTenantNameKey)

}

// UpdateWithVersion update with revision control, if the session is not nil then with transactions
func (m *defaultTenantModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, newData *Tenant) error {

	var sqlResult sql.Result
	var err error

	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	oldRevision := data.Revision
	newData.Revision += 1

	userCenterTenantIdKey := fmt.Sprintf("%s%v", cacheUserCenterTenantIdPrefix, data.Id)
	userCenterTenantNameKey := fmt.Sprintf("%s%v", cacheUserCenterTenantNamePrefix, data.Name)

	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and revision = ? ", m.table, tenantRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, newData.ParentId, newData.Name, newData.Contact, newData.Mobile, newData.Sort, newData.Status, newData.StartTime, newData.EndTime, newData.DeletedAt, newData.Deleted, newData.Account, newData.Revision, newData.Id, oldRevision)
		}
		return conn.ExecCtx(ctx, query, newData.ParentId, newData.Name, newData.Contact, newData.Mobile, newData.Sort, newData.Status, newData.StartTime, newData.EndTime, newData.DeletedAt, newData.Deleted, newData.Account, newData.Revision, newData.Id, oldRevision)
	}, userCenterTenantIdKey, userCenterTenantNameKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return statuserr.NewNotFoundError(i18n.TargetNotFound)
	}

	return nil
}

func (m *defaultTenantModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserCenterTenantIdPrefix, primary)
}

func (m *defaultTenantModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and deleted = ? limit 1", tenantRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultTenantModel) tableName() string {
	return m.table
}

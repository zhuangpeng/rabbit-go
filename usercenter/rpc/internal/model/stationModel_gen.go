// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	globalkey "github.com/zhuangpeng/rabbit-go/pkg/globalKey"
	"github.com/zhuangpeng/rabbit-go/pkg/i18n"
	"github.com/zhuangpeng/rabbit-go/pkg/statuserr"
	"github.com/zhuangpeng/rabbit-go/pkg/utils/dbx"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	stationFieldNames          = builder.RawFieldNames(&Station{})
	stationRows                = strings.Join(stationFieldNames, ",")
	stationRowsExpectAutoSet   = strings.Join(stringx.Remove(stationFieldNames, "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	stationRowsWithPlaceHolder = strings.Join(stringx.Remove(stationFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"

	cacheUserCenterStationIdPrefix = "cache:userCenter:station:id:"
)

type (
	stationModel interface {
		Insert(ctx context.Context, dropZeroValue bool, session sqlx.Session, data *Station) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Station, error)
		Update(ctx context.Context, session sqlx.Session, data *Station) (sql.Result, error)
		UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Station) error
		Delete(ctx context.Context, id string) error
	}

	defaultStationModel struct {
		sqlc.CachedConn
		table string
	}

	Station struct {
		Id        string       `db:"id"`        // 岗位标识
		Name      string       `db:"name"`      // 岗位名称
		TenantId  string       `db:"tenant_id"` // 岗位归属租户
		Sort      int64        `db:"sort"`      // 显示排序
		CreatedAt time.Time    `db:"created_at"`
		UpdatedAt sql.NullTime `db:"updated_at"`
		DeletedAt sql.NullTime `db:"deleted_at"`
		Deleted   int64        `db:"deleted"` // 是否删除  1-否 2-是
		Revision  int64        `db:"revision"`
	}
)

func newStationModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultStationModel {
	return &defaultStationModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`station`",
	}
}

func (m *defaultStationModel) Delete(ctx context.Context, id string) error {
	userCenterStationIdKey := fmt.Sprintf("%s%v", cacheUserCenterStationIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userCenterStationIdKey)
	return err
}

func (m *defaultStationModel) FindOne(ctx context.Context, id string) (*Station, error) {
	userCenterStationIdKey := fmt.Sprintf("%s%v", cacheUserCenterStationIdPrefix, id)
	var resp Station
	err := m.QueryRowCtx(ctx, &resp, userCenterStationIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? and deleted = ? limit 1", stationRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id, globalkey.DelStateNo)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

// Insert
// if dropZeroValue is true then filter the zero value with struct
// if session not nil, the execute statement with transactions
func (m *defaultStationModel) Insert(ctx context.Context, dropZeroValue bool, session sqlx.Session, data *Station) (sql.Result, error) {
	userCenterStationIdKey := fmt.Sprintf("%s%v", cacheUserCenterStationIdPrefix, data.Id)
	if dropZeroValue {
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
			query, args, err := dbx.GenInsert(*data)
			if err != nil {
				return nil, err
			}
			if session != nil {
				return session.ExecCtx(ctx, query, args...)
			}
			return conn.ExecCtx(ctx, query, args...)
		}, userCenterStationIdKey)
	} else {
		return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
			query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, stationRowsExpectAutoSet)
			if session != nil {
				return session.ExecCtx(ctx, query, data.Id, data.Name, data.TenantId, data.Sort, data.DeletedAt, data.Deleted, data.Revision)
			}
			return conn.ExecCtx(ctx, query, data.Id, data.Name, data.TenantId, data.Sort, data.DeletedAt, data.Deleted, data.Revision)
		}, userCenterStationIdKey)
	}
}

// Update when session not nil update with transactions
func (m *defaultStationModel) Update(ctx context.Context, session sqlx.Session, data *Station) (sql.Result, error) {
	userCenterStationIdKey := fmt.Sprintf("%s%v", cacheUserCenterStationIdPrefix, data.Id)
	return m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, stationRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.TenantId, data.Sort, data.DeletedAt, data.Deleted, data.Revision, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.TenantId, data.Sort, data.DeletedAt, data.Deleted, data.Revision, data.Id)
	}, userCenterStationIdKey)

}

// UpdateWithVersion update with revision control, if the session is not nil then with transactions
func (m *defaultStationModel) UpdateWithVersion(ctx context.Context, session sqlx.Session, data *Station) error {

	var sqlResult sql.Result
	var err error

	oldRevision := data.Revision
	data.Revision += 1

	userCenterStationIdKey := fmt.Sprintf("%s%v", cacheUserCenterStationIdPrefix, data.Id)

	sqlResult, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ? and revision = ? ", m.table, stationRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Name, data.TenantId, data.Sort, data.DeletedAt, data.Deleted, data.Revision, data.Id, oldRevision)
		}
		return conn.ExecCtx(ctx, query, data.Name, data.TenantId, data.Sort, data.DeletedAt, data.Deleted, data.Revision, data.Id, oldRevision)
	}, userCenterStationIdKey)
	if err != nil {
		return err
	}
	updateCount, err := sqlResult.RowsAffected()
	if err != nil {
		return err
	}
	if updateCount == 0 {
		return statuserr.NewNotFoundError(i18n.TargetNotFound)
	}

	return nil
}

func (m *defaultStationModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserCenterStationIdPrefix, primary)
}

func (m *defaultStationModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? and deleted = ? limit 1", stationRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary, globalkey.DelStateNo)
}

func (m *defaultStationModel) tableName() string {
	return m.table
}

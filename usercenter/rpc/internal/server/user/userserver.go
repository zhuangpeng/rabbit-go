// Code generated by goctl. DO NOT EDIT!
// Source: usercenter.proto

package server

import (
	"context"

	"github.com/zhuangpeng/rabbit-go/usercenter/rpc/internal/logic/user"
	"github.com/zhuangpeng/rabbit-go/usercenter/rpc/internal/svc"
	"github.com/zhuangpeng/rabbit-go/usercenter/rpc/pb"
)

type UserServer struct {
	svcCtx *svc.ServiceContext
	pb.UnimplementedUserServer
}

func NewUserServer(svcCtx *svc.ServiceContext) *UserServer {
	return &UserServer{
		svcCtx: svcCtx,
	}
}

func (s *UserServer) Login(ctx context.Context, in *pb.LoginReq) (*pb.LoginResp, error) {
	l := userlogic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

func (s *UserServer) ChangePassword(ctx context.Context, in *pb.ChangePasswordReq) (*pb.BaseResp, error) {
	l := userlogic.NewChangePasswordLogic(ctx, s.svcCtx)
	return l.ChangePassword(in)
}

func (s *UserServer) CreateOrUpdateUser(ctx context.Context, in *pb.CreateOrUpdateUserReq) (*pb.BaseResp, error) {
	l := userlogic.NewCreateOrUpdateUserLogic(ctx, s.svcCtx)
	return l.CreateOrUpdateUser(in)
}

func (s *UserServer) GetUserById(ctx context.Context, in *pb.UUIDReq) (*pb.UserInfoResp, error) {
	l := userlogic.NewGetUserByIdLogic(ctx, s.svcCtx)
	return l.GetUserById(in)
}

func (s *UserServer) GetUserList(ctx context.Context, in *pb.GetUserListReq) (*pb.UserListResp, error) {
	l := userlogic.NewGetUserListLogic(ctx, s.svcCtx)
	return l.GetUserList(in)
}

func (s *UserServer) DeleteUser(ctx context.Context, in *pb.UUIDReq) (*pb.BaseResp, error) {
	l := userlogic.NewDeleteUserLogic(ctx, s.svcCtx)
	return l.DeleteUser(in)
}

func (s *UserServer) BatchDeleteUser(ctx context.Context, in *pb.UUIDsReq) (*pb.BaseResp, error) {
	l := userlogic.NewBatchDeleteUserLogic(ctx, s.svcCtx)
	return l.BatchDeleteUser(in)
}

func (s *UserServer) UpdateProfile(ctx context.Context, in *pb.UpdateProfileReq) (*pb.BaseResp, error) {
	l := userlogic.NewUpdateProfileLogic(ctx, s.svcCtx)
	return l.UpdateProfile(in)
}

func (s *UserServer) UpdateUserStatus(ctx context.Context, in *pb.StatusCodeUUIDReq) (*pb.BaseResp, error) {
	l := userlogic.NewUpdateUserStatusLogic(ctx, s.svcCtx)
	return l.UpdateUserStatus(in)
}

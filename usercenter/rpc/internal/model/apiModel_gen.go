// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	apiFieldNames          = builder.RawFieldNames(&Api{})
	apiRows                = strings.Join(apiFieldNames, ",")
	apiRowsExpectAutoSet   = strings.Join(stringx.Remove(apiFieldNames, "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	apiRowsWithPlaceHolder = strings.Join(stringx.Remove(apiFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"

	cacheUserCenterApiIdPrefix         = "cache:userCenter:api:id:"
	cacheUserCenterApiPathMethodPrefix = "cache:userCenter:api:path:method:"
)

type (
	apiModel interface {
		Insert(ctx context.Context, data *Api) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Api, error)
		FindOneByPathMethod(ctx context.Context, path string, method string) (*Api, error)
		Update(ctx context.Context, data *Api) error
		Delete(ctx context.Context, id string) error
	}

	defaultApiModel struct {
		sqlc.CachedConn
		table string
	}

	Api struct {
		Id          string    `db:"id"`          // 接口标识
		Path        string    `db:"path"`        // 接口路径
		Description string    `db:"description"` // 接口描述
		ApiGroup    string    `db:"api_group"`   // 接口分组
		Method      string    `db:"method"`      // 接口方法
		CreateTime  time.Time `db:"create_time"` // 创建时间
		UpdateTime  time.Time `db:"update_time"` // 修改时间
	}
)

func newApiModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultApiModel {
	return &defaultApiModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`api`",
	}
}

func (m *defaultApiModel) Delete(ctx context.Context, id string) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userCenterApiIdKey := fmt.Sprintf("%s%v", cacheUserCenterApiIdPrefix, id)
	userCenterApiPathMethodKey := fmt.Sprintf("%s%v:%v", cacheUserCenterApiPathMethodPrefix, data.Path, data.Method)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userCenterApiIdKey, userCenterApiPathMethodKey)
	return err
}

func (m *defaultApiModel) FindOne(ctx context.Context, id string) (*Api, error) {
	userCenterApiIdKey := fmt.Sprintf("%s%v", cacheUserCenterApiIdPrefix, id)
	var resp Api
	err := m.QueryRowCtx(ctx, &resp, userCenterApiIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", apiRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApiModel) FindOneByPathMethod(ctx context.Context, path string, method string) (*Api, error) {
	userCenterApiPathMethodKey := fmt.Sprintf("%s%v:%v", cacheUserCenterApiPathMethodPrefix, path, method)
	var resp Api
	err := m.QueryRowIndexCtx(ctx, &resp, userCenterApiPathMethodKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `path` = ? and `method` = ? limit 1", apiRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, path, method); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultApiModel) Insert(ctx context.Context, data *Api) (sql.Result, error) {
	userCenterApiIdKey := fmt.Sprintf("%s%v", cacheUserCenterApiIdPrefix, data.Id)
	userCenterApiPathMethodKey := fmt.Sprintf("%s%v:%v", cacheUserCenterApiPathMethodPrefix, data.Path, data.Method)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, apiRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Path, data.Description, data.ApiGroup, data.Method)
	}, userCenterApiIdKey, userCenterApiPathMethodKey)
	return ret, err
}

func (m *defaultApiModel) Update(ctx context.Context, newData *Api) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userCenterApiIdKey := fmt.Sprintf("%s%v", cacheUserCenterApiIdPrefix, data.Id)
	userCenterApiPathMethodKey := fmt.Sprintf("%s%v:%v", cacheUserCenterApiPathMethodPrefix, data.Path, data.Method)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, apiRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Path, newData.Description, newData.ApiGroup, newData.Method, newData.Id)
	}, userCenterApiIdKey, userCenterApiPathMethodKey)
	return err
}

func (m *defaultApiModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheUserCenterApiIdPrefix, primary)
}

func (m *defaultApiModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", apiRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultApiModel) tableName() string {
	return m.table
}
